{"version":3,"file":"index.umd.js","sources":["../../../node_modules/is-typedarray/index.js","../../../node_modules/typedarray-to-buffer/index.js","../src/index.ts"],"sourcesContent":["module.exports      = isTypedArray\nisTypedArray.strict = isStrictTypedArray\nisTypedArray.loose  = isLooseTypedArray\n\nvar toString = Object.prototype.toString\nvar names = {\n    '[object Int8Array]': true\n  , '[object Int16Array]': true\n  , '[object Int32Array]': true\n  , '[object Uint8Array]': true\n  , '[object Uint8ClampedArray]': true\n  , '[object Uint16Array]': true\n  , '[object Uint32Array]': true\n  , '[object Float32Array]': true\n  , '[object Float64Array]': true\n}\n\nfunction isTypedArray(arr) {\n  return (\n       isStrictTypedArray(arr)\n    || isLooseTypedArray(arr)\n  )\n}\n\nfunction isStrictTypedArray(arr) {\n  return (\n       arr instanceof Int8Array\n    || arr instanceof Int16Array\n    || arr instanceof Int32Array\n    || arr instanceof Uint8Array\n    || arr instanceof Uint8ClampedArray\n    || arr instanceof Uint16Array\n    || arr instanceof Uint32Array\n    || arr instanceof Float32Array\n    || arr instanceof Float64Array\n  )\n}\n\nfunction isLooseTypedArray(arr) {\n  return names[toString.call(arr)]\n}\n","/*! typedarray-to-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <https://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nmodule.exports = function typedarrayToBuffer (arr) {\n  return ArrayBuffer.isView(arr)\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back\n    // new Buffer, respecting the \"view\", i.e. byteOffset and byteLength\n    ? Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength)\n    // Pass through all other types to `Buffer.from`\n    : Buffer.from(arr)\n}\n","import _isTypedArray from \"is-typedarray\";\nimport typedArrayToBuffer from \"typedarray-to-buffer\";\n\n// -- Constants ------------------------------------------ //\n\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\n\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\n\nconst STRING_ZERO = \"0\";\n\n// -- Buffer --------------------------------------------- //\n\nexport function bufferToArray(buf: Buffer): Uint8Array {\n  return new Uint8Array(buf);\n}\n\nexport function bufferToHex(buf: Buffer, prefixed = false): string {\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexport function bufferToUtf8(buf: Buffer): string {\n  return buf.toString(ENC_UTF8);\n}\n\nexport function bufferToNumber(buf: Buffer): number {\n  return buf.readUIntBE(0, buf.length);\n}\n\nexport function bufferToBinary(buf: Buffer): string {\n  return arrayToBinary(bufferToArray(buf));\n}\n\n// -- Uint8Array ----------------------------------------- //\n\nexport function arrayToBuffer(arr: Uint8Array): Buffer {\n  return typedArrayToBuffer(arr);\n}\n\nexport function arrayToHex(arr: Uint8Array, prefixed = false): string {\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\n\nexport function arrayToUtf8(arr: Uint8Array): string {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\n\nexport function arrayToNumber(arr: Uint8Array): number {\n  return bufferToNumber(arrayToBuffer(arr));\n}\n\nexport function arrayToBinary(arr: Uint8Array): string {\n  return Array.from(arr).map(numberToBinary).join(\"\");\n}\n\n// -- Hex ------------------------------------------------ //\n\nexport function hexToBuffer(hex: string): Buffer {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\n\nexport function hexToArray(hex: string): Uint8Array {\n  return bufferToArray(hexToBuffer(hex));\n}\n\nexport function hexToUtf8(hex: string): string {\n  return bufferToUtf8(hexToBuffer(hex));\n}\n\nexport function hexToNumber(hex: string): number {\n  return arrayToNumber(hexToArray(hex));\n}\n\nexport function hexToBinary(hex: string): string {\n  return arrayToBinary(hexToArray(hex));\n}\n\n// -- Utf8 ----------------------------------------------- //\n\nexport function utf8ToBuffer(utf8: string): Buffer {\n  return Buffer.from(utf8, ENC_UTF8);\n}\n\nexport function utf8ToArray(utf8: string): Uint8Array {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\n\nexport function utf8ToHex(utf8: string, prefixed = false): string {\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\n\nexport function utf8ToNumber(utf8: string): number {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n  return num;\n}\n\nexport function utf8ToBinary(utf8: string): string {\n  return arrayToBinary(utf8ToArray(utf8));\n}\n\n// -- Number ----------------------------------------------- //\n\nexport function numberToBuffer(num: number): Buffer {\n  return binaryToBuffer(numberToBinary(num));\n}\n\nexport function numberToArray(num: number): Uint8Array {\n  return binaryToArray(numberToBinary(num));\n}\n\nexport function numberToHex(num: number, prefixed?: boolean): string {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\n\nexport function numberToUtf8(num: number): string {\n  return `${num}`;\n}\n\nexport function numberToBinary(num: number): string {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\n\n// -- Binary ----------------------------------------------- //\n\nexport function binaryToBuffer(bin: string): Buffer {\n  return arrayToBuffer(binaryToArray(bin));\n}\n\nexport function binaryToArray(bin: string): Uint8Array {\n  return new Uint8Array(splitBytes(bin).map((x) => parseInt(x, 2)));\n}\n\nexport function binaryToHex(bin: string | string, prefixed?: boolean): string {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\n\nexport function binaryToUtf8(bin: string): string {\n  return arrayToUtf8(binaryToArray(bin));\n}\n\nexport function binaryToNumber(bin: string): number {\n  return arrayToNumber(binaryToArray(bin));\n}\n\n// -- Validators ----------------------------------------- //\n\nexport function isBinaryString(str: any): boolean {\n  if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n  return true;\n}\n\nexport function isHexString(str: any, length?: number): boolean {\n  if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\n\nexport function isBuffer(val: any): boolean {\n  return Buffer.isBuffer(val);\n}\n\nexport function isTypedArray(val: any): boolean {\n  return _isTypedArray.strict(val) && !isBuffer(val);\n}\n\nexport function isArrayBuffer(val: any): boolean {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\n\nexport function getType(val: any) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\n\nexport function getEncoding(str: string) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n  return ENC_UTF8;\n}\n\n// -- Misc ----------------------------------------------- //\n\nexport function concatBuffers(...args: Buffer[]): Buffer {\n  const result = Buffer.concat(args);\n  return result;\n}\n\nexport function concatArrays(...args: Uint8Array[]): Uint8Array {\n  let result: number[] = [];\n  args.forEach((arg) => (result = result.concat(Array.from(arg))));\n  return new Uint8Array([...result]);\n}\n\nexport function trimLeft(data: Buffer, length: number): Buffer {\n  const diff = data.length - length;\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n  return data;\n}\n\nexport function trimRight(data: Buffer, length: number): Buffer {\n  return data.slice(0, length);\n}\n\nexport function calcByteLength(length: number, byteSize = 8): number {\n  const remainder = length % byteSize;\n  return remainder ? ((length - remainder) / byteSize) * byteSize + byteSize : length;\n}\n\nexport function splitBytes(str: string, byteSize = 8): string[] {\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n  return Array.from(bytes || []);\n}\n\nexport function swapBytes(str: string): string {\n  return splitBytes(str).map(reverseString).join(\"\");\n}\n\nexport function swapHex(str: string): string {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\n\nexport function sanitizeBytes(str: string, byteSize = 8, padding = STRING_ZERO): string {\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\n\nexport function padLeft(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, true, padding);\n}\n\nexport function padRight(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, false, padding);\n}\n\nexport function removeHexPrefix(hex: string): string {\n  return hex.replace(/^0x/, \"\");\n}\n\nexport function addHexPrefix(hex: string): string {\n  return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\n\nexport function sanitizeHex(hex: string): string {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\n\nexport function removeHexLeadingZeros(hex: string): string {\n  const prefixed = hex.startsWith(\"0x\");\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\n// -- Private ----------------------------------------------- //\n\nfunction isUndefined(value: any): boolean {\n  return typeof value === \"undefined\";\n}\n\nfunction isDefined(value: any): boolean {\n  return !isUndefined(value);\n}\n\nfunction assert(assertion: boolean, errorMessage: string) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction reverseString(str: string) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction padString(str: string, length: number, left: boolean, padding = STRING_ZERO): string {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\n"],"names":["isTypedArray","g","p"],"mappings":"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"}