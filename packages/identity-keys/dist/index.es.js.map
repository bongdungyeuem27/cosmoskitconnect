{"version":3,"file":"index.es.js","sources":["../src/identity-keys.ts","../src/types.ts"],"sourcesContent":["import * as ed25519 from \"@noble/ed25519\";\nimport { Cacao, CacaoPayload, verifySignature } from \"@cosmoskitconnect/cacao\";\nimport { Store } from \"@cosmoskitconnect/core\";\nimport {\n  JwtPayload,\n  composeDidPkh,\n  encodeEd25519Key,\n  generateJWT,\n  jwtExp,\n  objectToHex,\n} from \"@cosmoskitconnect/did-jwt\";\nimport { ICore, IStore } from \"@cosmoskitconnect/types\";\nimport { formatMessage, generateRandomBytes32 } from \"@cosmoskitconnect/utils\";\nimport axios from \"axios\";\nimport {\n  IIdentityKeys,\n  IdentityKeychain,\n  RegisterIdentityParams,\n  ResolveIdentityParams,\n  UnregisterIdentityParams,\n  GetIdentityParams,\n} from \"./types\";\n\nexport const DEFAULT_KEYSERVER_URL = \"https://keys.walletconnect.com\";\nconst IDENTITY_KEYS_STORAGE_PREFIX = \"wc@2:identityKeys:\";\n\nexport class IdentityKeys implements IIdentityKeys {\n  private keyserverUrl: string;\n  public identityKeys: IStore<IdentityKeychain[\"accountId\"], IdentityKeychain>;\n\n  constructor(private core: ICore, private projectId: string, keyServerUrl?: string) {\n    this.keyserverUrl = keyServerUrl ?? DEFAULT_KEYSERVER_URL;\n    this.identityKeys = new Store(\n      core,\n      this.core.logger,\n      \"identityKeys\",\n      IDENTITY_KEYS_STORAGE_PREFIX,\n      (keys: IdentityKeychain) => keys.accountId,\n    );\n  }\n\n  public init = async () => {\n    await this.identityKeys.init();\n  };\n\n  public generateIdAuth = async (accountId: string, payload: JwtPayload) => {\n    const { identityKeyPub, identityKeyPriv } = this.identityKeys.get(accountId);\n\n    return generateJWT([identityKeyPub, identityKeyPriv], payload);\n  };\n\n  public isRegistered(account: string) {\n    return this.identityKeys.keys.includes(account);\n  }\n\n  public async prepareRegistrationWithRecaps({\n    domain,\n    recapObject,\n  }: {\n    domain: string;\n    recapObject: {\n      att: Record<string, Record<string, Record<string, any>[]>>;\n    };\n  }) {\n    const encodedRecap = objectToHex(recapObject);\n    const authRecap = `urn:recap:${encodedRecap}`;\n\n    const { pubKeyHex, privateKey } = await this.generateIdentityKey();\n    const didKey = encodeEd25519Key(pubKeyHex);\n\n    const uri = `https://${domain}?walletconnect_identity_key=${didKey}`;\n\n    const cacaoPayload: Omit<CacaoPayload, \"iss\"> & { uri: string } = {\n      aud: uri,\n      uri,\n      statement: undefined,\n      domain,\n      nonce: generateRandomBytes32(),\n      iat: new Date().toISOString(),\n      version: \"1\",\n      resources: [this.keyserverUrl, authRecap],\n    };\n\n    return {\n      cacaoPayload,\n      privateIdentityKey: privateKey,\n    };\n  }\n\n  public async prepareRegistration({\n    domain,\n    accountId,\n    statement,\n  }: {\n    domain: string;\n    statement?: string;\n    accountId: string;\n  }) {\n    const { privateKey, pubKeyHex } = await this.generateIdentityKey();\n\n    const cacaoPayload = {\n      aud: encodeEd25519Key(pubKeyHex),\n      statement,\n      domain,\n      iss: composeDidPkh(accountId),\n      nonce: generateRandomBytes32(),\n      iat: new Date().toISOString(),\n      version: \"1\",\n      resources: [this.keyserverUrl],\n    };\n\n    return {\n      message: formatMessage(cacaoPayload, composeDidPkh(accountId)),\n      registerParams: {\n        cacaoPayload,\n        privateIdentityKey: privateKey,\n      },\n    };\n  }\n\n  public async registerIdentity({\n    registerParams,\n    signature,\n  }: RegisterIdentityParams): Promise<string> {\n    const accountId = registerParams.cacaoPayload.iss.split(\":\").slice(-3).join(\":\");\n\n    if (this.isRegistered(accountId)) {\n      const storedKeyPair = this.identityKeys.get(accountId);\n      return storedKeyPair.identityKeyPub;\n    } else {\n      try {\n        const message = formatMessage(registerParams.cacaoPayload, registerParams.cacaoPayload.iss);\n\n        if (!signature.s) {\n          throw new Error(\n            `Provided an invalid signature. Expected a string but got: ${signature.s}`,\n          );\n        }\n\n        const [chainPrefix, chain, address] = accountId.split(\":\");\n        const invalidSignatureError = `Provided an invalid signature. Signature ${signature.s} of type ${signature.t} by account ${accountId} is not a valid signature for message ${message}`;\n\n        let signatureValid = false;\n\n        // account for an invalid signature\n        try {\n          signatureValid = await verifySignature(\n            address,\n            message,\n            signature,\n            `${chainPrefix}:${chain}`,\n            this.projectId,\n          );\n        } catch {\n          signatureValid = false;\n        }\n\n        if (!signatureValid) {\n          throw new Error(invalidSignatureError);\n        }\n\n        const url = `${this.keyserverUrl}/identity`;\n\n        const cacao: Cacao = {\n          h: {\n            t: \"eip4361\",\n          },\n          p: registerParams.cacaoPayload,\n          s: signature,\n        };\n\n        try {\n          await axios.post(url, { cacao });\n        } catch (e) {\n          throw new Error(`Failed to register on keyserver: ${e}`);\n        }\n\n        // Persist keys only after successful registration\n        const { pubKeyHex, privKeyHex } = await this.getKeyData(registerParams.privateIdentityKey);\n\n        await this.core.crypto.keychain.set(pubKeyHex, privKeyHex);\n        await this.identityKeys.set(accountId, {\n          identityKeyPriv: privKeyHex,\n          identityKeyPub: pubKeyHex,\n          accountId,\n        });\n\n        return pubKeyHex;\n      } catch (error) {\n        this.core.logger.error(error);\n        throw error;\n      }\n    }\n  }\n\n  public async unregisterIdentity({ account }: UnregisterIdentityParams): Promise<void> {\n    try {\n      const iat = Date.now();\n      const keys = this.identityKeys.get(account);\n      const didPublicKey = composeDidPkh(account);\n      const unregisterIdentityPayload = {\n        iat,\n        exp: jwtExp(iat),\n        iss: encodeEd25519Key(keys.identityKeyPub),\n        aud: this.keyserverUrl,\n        pkh: didPublicKey,\n        act: \"unregister_identity\",\n        sub: \"identity_keys\",\n      };\n\n      const idAuth = await this.generateIdAuth(account, unregisterIdentityPayload);\n\n      const url = `${this.keyserverUrl}/identity`;\n\n      const response = await axios.delete(url, {\n        data: {\n          idAuth,\n        },\n      });\n\n      if (response.status !== 200) {\n        throw new Error(`Failed to unregister on keyserver ${response.status}`);\n      }\n\n      await this.identityKeys.delete(account, {\n        code: -1,\n        message: `Account ${account} unregistered`,\n      });\n    } catch (error) {\n      this.core.logger.error(error);\n      throw error;\n    }\n  }\n\n  public async resolveIdentity({ publicKey }: ResolveIdentityParams): Promise<Cacao> {\n    const url = `${this.keyserverUrl}/identity?publicKey=${publicKey.split(\":\")[2]}`;\n\n    try {\n      const { data } = await axios.get<{ value: { cacao: Cacao } }>(url);\n      return data.value.cacao;\n    } catch (e) {\n      this.core.logger.error(e);\n      throw new Error(\"Failed to resolve identity key\");\n    }\n  }\n\n  public async getIdentity({ account }: GetIdentityParams): Promise<string> {\n    return this.identityKeys.get(account).identityKeyPub;\n  }\n\n  public async hasIdentity({ account }: GetIdentityParams): Promise<boolean> {\n    return this.identityKeys.keys.includes(account);\n  }\n\n  // --------------------------- Private Helpers -----------------------------//\n\n  private generateIdentityKey = () => {\n    const privateKey = ed25519.utils.randomPrivateKey();\n\n    return this.getKeyData(privateKey);\n  };\n\n  private getKeyHex = (key: Uint8Array) => {\n    return ed25519.utils.bytesToHex(key).toLowerCase();\n  };\n\n  private getKeyData = async (privateKey: Uint8Array) => {\n    const publicKey = await ed25519.getPublicKey(privateKey);\n\n    return {\n      publicKey,\n      privateKey,\n      pubKeyHex: this.getKeyHex(publicKey),\n      privKeyHex: this.getKeyHex(privateKey),\n    };\n  };\n}\n","import { CacaoPayload, Cacao, CacaoSignature } from \"@cosmoskitconnect/cacao\";\nimport { JwtPayload } from \"@cosmoskitconnect/did-jwt\";\n\nexport interface RegisterIdentityParams {\n  registerParams: {\n    cacaoPayload: CacaoPayload;\n    privateIdentityKey: Uint8Array;\n  };\n  signature: CacaoSignature;\n}\n\nexport interface ResolveIdentityParams {\n  publicKey: string;\n}\n\nexport interface UnregisterIdentityParams {\n  account: string;\n}\n\nexport interface GetIdentityParams {\n  account: string;\n}\n\nexport interface IdentityKeychain {\n  accountId: string;\n  identityKeyPub: string;\n  identityKeyPriv: string;\n}\n\nexport abstract class IIdentityKeys {\n  public abstract init(): Promise<void>;\n  public abstract registerIdentity(params: RegisterIdentityParams): Promise<string>;\n  public abstract resolveIdentity(params: ResolveIdentityParams): Promise<Cacao>;\n  public abstract unregisterIdentity(params: UnregisterIdentityParams): Promise<void>;\n  public abstract generateIdAuth(accountId: string, payload: JwtPayload): Promise<string>;\n}\n"],"names":["IDENTITY_KEYS_STORAGE_PREFIX","core","projectId","keyServerUrl","accountId","payload","identityKeyPub","identityKeyPriv","generateJWT","privateKey","ed25519","key","publicKey","Store","keys","account","domain","recapObject","authRecap","objectToHex","pubKeyHex","didKey","encodeEd25519Key","uri","generateRandomBytes32","statement","cacaoPayload","composeDidPkh","formatMessage","registerParams","signature","message","chainPrefix","chain","address","invalidSignatureError","signatureValid","verifySignature","e","url","cacao","axios","privKeyHex","error","iat","didPublicKey","unregisterIdentityPayload","jwtExp","idAuth","response","data"],"mappings":"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"}