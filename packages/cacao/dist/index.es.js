import{hashMessage as m}from"@ethersproject/hash";import{recoverAddress as $}from"@ethersproject/transactions";import C from"isomorphic-unfetch";const g="https://rpc.walletconnect.com/v1",c=t=>t?.split(":"),p=t=>{const e=t&&c(t);if(e)return e[3]},v=t=>{const e=t&&c(t);if(e)return e[2]+":"+e[3]},w=t=>{const e=t&&c(t);if(e)return e.pop()},D=(t,e)=>{const r=`${t.domain} wants you to sign in with your Ethereum account:`,n=w(e),s=t.statement,a=`URI: ${t.aud}`,o=`Version: ${t.version}`,u=`Chain ID: ${p(e)}`,d=`Nonce: ${t.nonce}`,l=`Issued At: ${t.iat}`,f=t.resources&&t.resources.length>0?`Resources:
${t.resources.map(i=>`- ${i}`).join(`
`)}`:void 0;return[r,n,"",s,"",a,o,u,d,l,f].filter(i=>i!=null).join(`
`)};function I(t,e,r){return $(m(e),r).toLowerCase()===t.toLowerCase()}async function A(t,e,r,n,s,a){try{const o="0x1626ba7e",u="0000000000000000000000000000000000000000000000000000000000000040",d="0000000000000000000000000000000000000000000000000000000000000041",l=r.substring(2),f=m(e).substring(2),i=o+f+u+d+l,y=await C(`${a??g}/?chainId=${n}&projectId=${s}`,{method:"POST",body:JSON.stringify({id:L(),jsonrpc:"2.0",method:"eth_call",params:[{to:t,data:i},"latest"]})}),{result:h}=await y.json();return h?h.slice(0,o.length).toLowerCase()===o.toLowerCase():!1}catch{return!1}}function L(){return Date.now()+Math.floor(Math.random()*1e3)}async function S(t,e,r,n,s){switch(r.t){case"eip191":return I(t,e,r.s);case"eip1271":return await A(t,e,r.s,n,s);default:throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${r.t}`)}}export{g as DEFAULT_RPC_URL,D as formatMessage,w as getDidAddress,c as getDidAddressSegments,p as getDidChainId,v as getNamespacedDidChainId,S as verifySignature};
//# sourceMappingURL=index.es.js.map
