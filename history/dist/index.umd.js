(function(o,u){typeof exports=="object"&&typeof module<"u"?u(exports):typeof define=="function"&&define.amd?define(["exports"],u):(o=typeof globalThis<"u"?globalThis:o||self,u(o["@cosmoskitconnect/history"]={}))})(this,function(o){"use strict";function u(n){var e=n.default;if(typeof e=="function"){var t=function(){return e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(n).forEach(function(r){var s=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:function(){return n[r]}})}),t}function _(n,e){return e=e||{},new Promise(function(t,r){var s=new XMLHttpRequest,i=[],a=[],l={},m=function(){return{ok:(s.status/100|0)==2,statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:m,headers:{keys:function(){return i},entries:function(){return a},get:function(f){return l[f.toLowerCase()]},has:function(f){return f.toLowerCase()in l}}}};for(var w in s.open(e.method||"get",n,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(f,c,p){i.push(c=c.toLowerCase()),a.push([c,p]),l[c]=l[c]?l[c]+","+p:p}),t(m())},s.onerror=r,s.withCredentials=e.credentials=="include",e.headers)s.setRequestHeader(w,e.headers[w]);s.send(e.body||null)})}var j=Object.freeze({__proto__:null,default:_}),d=u(j),y=self.fetch||(self.fetch=d.default||d);const h="https://history.walletconnect.com",b=86400*1e3;class g{constructor(e,t){this.core=e,this.messageResponse=t}async injectIntoRelayer(){const{messages:e,topic:t}=this.messageResponse;for(const{message:r}of e)this.core.relayer.messages.has(t,r)||(await this.core.relayer.messages.set(t,r),this.core.relayer.events.emit("relayer_message",{topic:t,publishedAt:Date.now(),message:r}))}}class T{constructor(e,t=h){this.core=e,this.historyUrl=t,this.jwt=""}async registerTags(e,t=h){try{await y(`${t}/register`,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json",Authorization:`Bearer ${await this.getJwt()}`}})}catch(r){throw new Error(`[HistoryClient] Failed to register tags: ${JSON.stringify(r)}`)}}async getMessages(e,t=h){const r=Object.entries(e).map(([i,a])=>[i,a.toString()]),s=new URLSearchParams(r);try{const i=`${t}/messages?${s.toString()}`,a=await(await y(i,{method:"GET",headers:{"Content-Type":"application/json"}})).json();return new g(this.core,a)}catch(i){throw new Error(`[HistoryClient] Failed to fetch messages: ${JSON.stringify(i)}`)}}async getJwt(){return this.jwt?this.jwt:(this.jwt=await this.core.crypto.signJWT(this.historyUrl),this.jwt)}}o.DAY_IN_MS=b,o.DEFAULT_HISTORY_URL=h,o.HistoricalMessages=g,o.HistoryClient=T,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=index.umd.js.map
