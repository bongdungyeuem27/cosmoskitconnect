{"version":3,"file":"index.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import _isTypedArray from \"is-typedarray\";\nimport typedArrayToBuffer from \"typedarray-to-buffer\";\n\n// -- Constants ------------------------------------------ //\n\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\n\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\n\nconst STRING_ZERO = \"0\";\n\n// -- Buffer --------------------------------------------- //\n\nexport function bufferToArray(buf: Buffer): Uint8Array {\n  return new Uint8Array(buf);\n}\n\nexport function bufferToHex(buf: Buffer, prefixed = false): string {\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexport function bufferToUtf8(buf: Buffer): string {\n  return buf.toString(ENC_UTF8);\n}\n\nexport function bufferToNumber(buf: Buffer): number {\n  return buf.readUIntBE(0, buf.length);\n}\n\nexport function bufferToBinary(buf: Buffer): string {\n  return arrayToBinary(bufferToArray(buf));\n}\n\n// -- Uint8Array ----------------------------------------- //\n\nexport function arrayToBuffer(arr: Uint8Array): Buffer {\n  return typedArrayToBuffer(arr);\n}\n\nexport function arrayToHex(arr: Uint8Array, prefixed = false): string {\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\n\nexport function arrayToUtf8(arr: Uint8Array): string {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\n\nexport function arrayToNumber(arr: Uint8Array): number {\n  return bufferToNumber(arrayToBuffer(arr));\n}\n\nexport function arrayToBinary(arr: Uint8Array): string {\n  return Array.from(arr).map(numberToBinary).join(\"\");\n}\n\n// -- Hex ------------------------------------------------ //\n\nexport function hexToBuffer(hex: string): Buffer {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\n\nexport function hexToArray(hex: string): Uint8Array {\n  return bufferToArray(hexToBuffer(hex));\n}\n\nexport function hexToUtf8(hex: string): string {\n  return bufferToUtf8(hexToBuffer(hex));\n}\n\nexport function hexToNumber(hex: string): number {\n  return arrayToNumber(hexToArray(hex));\n}\n\nexport function hexToBinary(hex: string): string {\n  return arrayToBinary(hexToArray(hex));\n}\n\n// -- Utf8 ----------------------------------------------- //\n\nexport function utf8ToBuffer(utf8: string): Buffer {\n  return Buffer.from(utf8, ENC_UTF8);\n}\n\nexport function utf8ToArray(utf8: string): Uint8Array {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\n\nexport function utf8ToHex(utf8: string, prefixed = false): string {\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\n\nexport function utf8ToNumber(utf8: string): number {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n  return num;\n}\n\nexport function utf8ToBinary(utf8: string): string {\n  return arrayToBinary(utf8ToArray(utf8));\n}\n\n// -- Number ----------------------------------------------- //\n\nexport function numberToBuffer(num: number): Buffer {\n  return binaryToBuffer(numberToBinary(num));\n}\n\nexport function numberToArray(num: number): Uint8Array {\n  return binaryToArray(numberToBinary(num));\n}\n\nexport function numberToHex(num: number, prefixed?: boolean): string {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\n\nexport function numberToUtf8(num: number): string {\n  return `${num}`;\n}\n\nexport function numberToBinary(num: number): string {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\n\n// -- Binary ----------------------------------------------- //\n\nexport function binaryToBuffer(bin: string): Buffer {\n  return arrayToBuffer(binaryToArray(bin));\n}\n\nexport function binaryToArray(bin: string): Uint8Array {\n  return new Uint8Array(splitBytes(bin).map((x) => parseInt(x, 2)));\n}\n\nexport function binaryToHex(bin: string | string, prefixed?: boolean): string {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\n\nexport function binaryToUtf8(bin: string): string {\n  return arrayToUtf8(binaryToArray(bin));\n}\n\nexport function binaryToNumber(bin: string): number {\n  return arrayToNumber(binaryToArray(bin));\n}\n\n// -- Validators ----------------------------------------- //\n\nexport function isBinaryString(str: any): boolean {\n  if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n  return true;\n}\n\nexport function isHexString(str: any, length?: number): boolean {\n  if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\n\nexport function isBuffer(val: any): boolean {\n  return Buffer.isBuffer(val);\n}\n\nexport function isTypedArray(val: any): boolean {\n  return _isTypedArray.strict(val) && !isBuffer(val);\n}\n\nexport function isArrayBuffer(val: any): boolean {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\n\nexport function getType(val: any) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\n\nexport function getEncoding(str: string) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n  return ENC_UTF8;\n}\n\n// -- Misc ----------------------------------------------- //\n\nexport function concatBuffers(...args: Buffer[]): Buffer {\n  const result = Buffer.concat(args);\n  return result;\n}\n\nexport function concatArrays(...args: Uint8Array[]): Uint8Array {\n  let result: number[] = [];\n  args.forEach((arg) => (result = result.concat(Array.from(arg))));\n  return new Uint8Array([...result]);\n}\n\nexport function trimLeft(data: Buffer, length: number): Buffer {\n  const diff = data.length - length;\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n  return data;\n}\n\nexport function trimRight(data: Buffer, length: number): Buffer {\n  return data.slice(0, length);\n}\n\nexport function calcByteLength(length: number, byteSize = 8): number {\n  const remainder = length % byteSize;\n  return remainder ? ((length - remainder) / byteSize) * byteSize + byteSize : length;\n}\n\nexport function splitBytes(str: string, byteSize = 8): string[] {\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n  return Array.from(bytes || []);\n}\n\nexport function swapBytes(str: string): string {\n  return splitBytes(str).map(reverseString).join(\"\");\n}\n\nexport function swapHex(str: string): string {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\n\nexport function sanitizeBytes(str: string, byteSize = 8, padding = STRING_ZERO): string {\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\n\nexport function padLeft(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, true, padding);\n}\n\nexport function padRight(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, false, padding);\n}\n\nexport function removeHexPrefix(hex: string): string {\n  return hex.replace(/^0x/, \"\");\n}\n\nexport function addHexPrefix(hex: string): string {\n  return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\n\nexport function sanitizeHex(hex: string): string {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\n\nexport function removeHexLeadingZeros(hex: string): string {\n  const prefixed = hex.startsWith(\"0x\");\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\n// -- Private ----------------------------------------------- //\n\nfunction isUndefined(value: any): boolean {\n  return typeof value === \"undefined\";\n}\n\nfunction isDefined(value: any): boolean {\n  return !isUndefined(value);\n}\n\nfunction assert(assertion: boolean, errorMessage: string) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction reverseString(str: string) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction padString(str: string, length: number, left: boolean, padding = STRING_ZERO): string {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\n"],"names":["ENC_HEX","ENC_UTF8","ENC_BIN","TYPE_BUFFER","TYPE_ARRAY","TYPE_TYPED_ARRAY","TYPE_ARRAY_BUFFER","STRING_ZERO","buf","prefixed","hex","arr","typedArrayToBuffer","utf8","num","assert","isDefined","bin","x","str","length","val","_isTypedArray","args","result","arg","data","diff","byteSize","remainder","bytes","reverseString","padding","padString","isUndefined","value","assertion","errorMessage","left","pad"],"mappings":"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"}