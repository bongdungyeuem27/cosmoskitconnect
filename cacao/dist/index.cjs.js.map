{"version":3,"file":"index.cjs.js","sources":["../src/utils.ts"],"sourcesContent":["import { CacaoPayload, CacaoSignature } from \"./types\";\nimport { hashMessage } from \"@ethersproject/hash\";\nimport { recoverAddress } from \"@ethersproject/transactions\";\nimport fetch from \"isomorphic-unfetch\";\n\nexport const DEFAULT_RPC_URL = \"https://rpc.walletconnect.com/v1\";\n\nexport const getDidAddressSegments = (iss: string) => {\n  return iss?.split(\":\");\n};\n\nexport const getDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[3];\n  }\n  return undefined;\n};\n\nexport const getNamespacedDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[2] + \":\" + segments[3];\n  }\n  return undefined;\n};\n\nexport const getDidAddress = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments.pop();\n  }\n  return undefined;\n};\n\nexport const formatMessage = (cacao: CacaoPayload, iss: string) => {\n  const header = `${cacao.domain} wants you to sign in with your Ethereum account:`;\n  const walletAddress = getDidAddress(iss);\n  const statement = cacao.statement;\n  const uri = `URI: ${cacao.aud}`;\n  const version = `Version: ${cacao.version}`;\n  const chainId = `Chain ID: ${getDidChainId(iss)}`;\n  const nonce = `Nonce: ${cacao.nonce}`;\n  const issuedAt = `Issued At: ${cacao.iat}`;\n  const resources =\n    cacao.resources && cacao.resources.length > 0\n      ? `Resources:\\n${cacao.resources.map((resource) => `- ${resource}`).join(\"\\n\")}`\n      : undefined;\n\n  const message = [\n    header,\n    walletAddress,\n    ``,\n    statement,\n    ``,\n    uri,\n    version,\n    chainId,\n    nonce,\n    issuedAt,\n    resources,\n  ]\n    .filter((val) => val !== undefined && val !== null) // remove unnecessary empty lines\n    .join(\"\\n\");\n\n  return message;\n};\n\nfunction isValidEip191Signature(address: string, message: string, signature: string): boolean {\n  const recoveredAddress = recoverAddress(hashMessage(message), signature);\n  return recoveredAddress.toLowerCase() === address.toLowerCase();\n}\n\nasync function isValidEip1271Signature(\n  address: string,\n  reconstructedMessage: string,\n  signature: string,\n  chainId: string,\n  projectId: string,\n  rpcUrl?: string,\n) {\n  try {\n    const eip1271MagicValue = \"0x1626ba7e\";\n    const dynamicTypeOffset = \"0000000000000000000000000000000000000000000000000000000000000040\";\n    const dynamicTypeLength = \"0000000000000000000000000000000000000000000000000000000000000041\";\n    const nonPrefixedSignature = signature.substring(2);\n    const nonPrefixedHashedMessage = hashMessage(reconstructedMessage).substring(2);\n\n    const data =\n      eip1271MagicValue +\n      nonPrefixedHashedMessage +\n      dynamicTypeOffset +\n      dynamicTypeLength +\n      nonPrefixedSignature;\n\n    const response = await fetch(\n      `${rpcUrl ?? DEFAULT_RPC_URL}/?chainId=${chainId}&projectId=${projectId}`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          id: generateJsonRpcId(),\n          jsonrpc: \"2.0\",\n          method: \"eth_call\",\n          params: [{ to: address, data }, \"latest\"],\n        }),\n      },\n    );\n    const { result } = await response.json();\n\n    if (!result) return false;\n\n    // Remove right-padded zeros from result to get only the concrete recovered value.\n    const recoveredValue = result.slice(0, eip1271MagicValue.length);\n    return recoveredValue.toLowerCase() === eip1271MagicValue.toLowerCase();\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction generateJsonRpcId() {\n  return Date.now() + Math.floor(Math.random() * 1000);\n}\n\nexport async function verifySignature(\n  address: string,\n  reconstructedMessage: string,\n  cacaoSignature: CacaoSignature,\n  chainId: string,\n  projectId: string,\n): Promise<boolean> {\n  // Determine if this signature is from an EOA or a contract.\n  switch (cacaoSignature.t) {\n    case \"eip191\":\n      return isValidEip191Signature(address, reconstructedMessage, cacaoSignature.s);\n    case \"eip1271\":\n      return await isValidEip1271Signature(\n        address,\n        reconstructedMessage,\n        cacaoSignature.s,\n        chainId,\n        projectId,\n      );\n    default:\n      throw new Error(\n        `verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${cacaoSignature.t}`,\n      );\n  }\n}\n"],"names":["iss","segments","cacao","header","walletAddress","statement","uri","version","chainId","nonce","issuedAt","resources","resource","val","isValidEip191Signature","address","message","signature","recoverAddress","hashMessage","isValidEip1271Signature","reconstructedMessage","projectId","rpcUrl","eip1271MagicValue","dynamicTypeOffset","dynamicTypeLength","nonPrefixedSignature","nonPrefixedHashedMessage","data","response","fetch","generateJsonRpcId","result","error","cacaoSignature"],"mappings":"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"}